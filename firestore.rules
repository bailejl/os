rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    match /core-rbac/{rbadId} {
      allow read: if isSignedIn() && ((isDataInTheirTenant() && isDataInTheirRole()) || isOwowAdmin())
      allow update: if isSignedIn() && isTenantAdmin() && failIfSettingTenantId()
      allow write: if isSignedIn() && isOwowAdmin()
    }
    match /users/{uid} {
      allow read: if isSignedIn() && isDataInTheirTenant()
      allow write: if isSignedIn() && (isOwner(uid) || isOwowAdmin()) && failIfSettingTenantId()
    }

    /// Functions ///

    function failIfSettingTenantId() {
      return !("tenantId" in incomingData())
    }

    function existingData() {
      return resource.data
    }

    function incomingData() {
      return request.resource.data
    }

    function isOwowAdmin() {
      return  getUserData().roles.hasAny(['admin']) && getUserData().tenantId == 'owow'
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function isOwner(userId) {
      return request.auth.uid == userId
    }

  // function emailVerified() {
    //   return request.auth.token.email_verified
    // }

    function isTenantAdmin() {
      return  isDataInTheirTenant() && getUserData().roles.hasAny(['admin'])
    }

    function isDataInTheirRole() {
      return getUserData().roles.hasAny([existingData().role])
    }

    function isDataInTheirTenant() {
      return existingData().tenantId == getUserData().tenantId
    }

    function isSignedIn() {
      return request.auth != null
    }
  }
}
